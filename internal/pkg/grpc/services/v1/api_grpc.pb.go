// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessagesAPIServiceClient is the client API for MessagesAPIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessagesAPIServiceClient interface {
	GetDirectMessages(ctx context.Context, in *GetDirectMessagesRequest, opts ...grpc.CallOption) (*GetDirectMessagesResponse, error)
	SendDirectMessages(ctx context.Context, in *SendDirectMessagesRequest, opts ...grpc.CallOption) (*SendDirectMessagesResponse, error)
}

type messagesAPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessagesAPIServiceClient(cc grpc.ClientConnInterface) MessagesAPIServiceClient {
	return &messagesAPIServiceClient{cc}
}

func (c *messagesAPIServiceClient) GetDirectMessages(ctx context.Context, in *GetDirectMessagesRequest, opts ...grpc.CallOption) (*GetDirectMessagesResponse, error) {
	out := new(GetDirectMessagesResponse)
	err := c.cc.Invoke(ctx, "/services.v1.MessagesAPIService/GetDirectMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesAPIServiceClient) SendDirectMessages(ctx context.Context, in *SendDirectMessagesRequest, opts ...grpc.CallOption) (*SendDirectMessagesResponse, error) {
	out := new(SendDirectMessagesResponse)
	err := c.cc.Invoke(ctx, "/services.v1.MessagesAPIService/SendDirectMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessagesAPIServiceServer is the server API for MessagesAPIService service.
// All implementations must embed UnimplementedMessagesAPIServiceServer
// for forward compatibility
type MessagesAPIServiceServer interface {
	GetDirectMessages(context.Context, *GetDirectMessagesRequest) (*GetDirectMessagesResponse, error)
	SendDirectMessages(context.Context, *SendDirectMessagesRequest) (*SendDirectMessagesResponse, error)
	mustEmbedUnimplementedMessagesAPIServiceServer()
}

// UnimplementedMessagesAPIServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessagesAPIServiceServer struct {
}

func (UnimplementedMessagesAPIServiceServer) GetDirectMessages(context.Context, *GetDirectMessagesRequest) (*GetDirectMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDirectMessages not implemented")
}
func (UnimplementedMessagesAPIServiceServer) SendDirectMessages(context.Context, *SendDirectMessagesRequest) (*SendDirectMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDirectMessages not implemented")
}
func (UnimplementedMessagesAPIServiceServer) mustEmbedUnimplementedMessagesAPIServiceServer() {}

// UnsafeMessagesAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessagesAPIServiceServer will
// result in compilation errors.
type UnsafeMessagesAPIServiceServer interface {
	mustEmbedUnimplementedMessagesAPIServiceServer()
}

func RegisterMessagesAPIServiceServer(s grpc.ServiceRegistrar, srv MessagesAPIServiceServer) {
	s.RegisterService(&MessagesAPIService_ServiceDesc, srv)
}

func _MessagesAPIService_GetDirectMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDirectMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagesAPIServiceServer).GetDirectMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.MessagesAPIService/GetDirectMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagesAPIServiceServer).GetDirectMessages(ctx, req.(*GetDirectMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagesAPIService_SendDirectMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendDirectMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagesAPIServiceServer).SendDirectMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.MessagesAPIService/SendDirectMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagesAPIServiceServer).SendDirectMessages(ctx, req.(*SendDirectMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessagesAPIService_ServiceDesc is the grpc.ServiceDesc for MessagesAPIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessagesAPIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.v1.MessagesAPIService",
	HandlerType: (*MessagesAPIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDirectMessages",
			Handler:    _MessagesAPIService_GetDirectMessages_Handler,
		},
		{
			MethodName: "SendDirectMessages",
			Handler:    _MessagesAPIService_SendDirectMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/v1/api.proto",
}
